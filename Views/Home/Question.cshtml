@model QaProject.Models.Question
@{
    ViewBag.Title = "Question";
}

<main class="Question_Details">
    <h2 class="Question_title">@Model.Title</h2>
    <section class="Question_Content">
        <div class="Scroll_Controller">
            <div class="votes_container">
                @if (User.Identity.IsAuthenticated && !string.IsNullOrEmpty(ViewBag.userId) && Model.OwnerId != ViewBag.userId)
                {
                    Html.RenderPartial("VoteButton", new QaProject.Models.ButtonViewModel { Id = Model.Id, UserId = ViewBag.userId, Type = "question" });
                }
                <div class="Vote_Count_Container">Votes:<p class="vote_Count" id="@("vote_count_question_" + Model.Id)">@ViewBag.VoteCount</p></div>
            </div>
            <p>@Model.Description</p>
        </div>
        <div class="tagContainer">
            @foreach (var tag in Model.Tags)
            {
                <span class="shownTags">
                    @tag.Name
                </span>
            }
        </div>
        <div class="Answer_Container">
            <div class="Answers">
                @if (Model.Answers.Count > 0)
                {
                    foreach (var answer in Model.Answers)
                    {
                        Html.RenderPartial("Answer", new QaProject.Models.AnswerViewModel { answer = answer, userName = answer.Owner.UserName });
                    }
                }
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                Html.RenderAction("AddAnswer", new { itemId = Model.Id, answerCount = Model.Answers.Count() });
            }
        </div>

    </section>
    <section class="Comments_Container">
        <div class="Question_Comments">
            <div class="question_comment">
                @if (Model.Comments.Count > 0)
                {
                    foreach (var comment in Model.Comments)
                    {
                        Html.RenderPartial("Comment", new QaProject.Models.CommentViewModel{ comment = comment, userName = comment.Owner.UserName});
                    }
                }
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                Html.RenderAction("AddComment", new { itemId = Model.Id, type = "question", commentCount = Model.Comments.Count() });
            }
        </div>
    </section>

</main>

<script>
    jQuery(document).ready(function () {
        $("#answerbtn").click(() => {
            let content = $("#answer").val();
            let id = $("#answer").data("itemid");
            let url = $("#answer").data("url");
            alert(id + url + content)
            let jsonObj = JSON.stringify({ itemId: id, content: content });
            $.ajax({
                type: "POST",
                url: url,
                contentType: "application/json",
                data: jsonObj,
                traditional: true
            }).done((htmlResult) => {
                $(".Answers").prepend(htmlResult);
            });
        });
        
    });
</script>